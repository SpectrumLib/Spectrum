/*
 * Microsoft Public License (Ms-PL) - Copyright (c) 2018-2019 The Spectrum Team
 * This file is subject to the terms and conditions of the Microsoft Public License, the text of which can be found in
 * the 'LICENSE' file at the root of this repository, or online at <https://opensource.org/licenses/MS-PL>.
 */
using System;
using System.Collections.Generic;
using static Spectrum.InternalLog;

namespace Spectrum.Audio
{
	// Central type for managing the audio subsystem components
	internal static class AudioEngine
	{
		// Reasonable limit, under many of the common backend limits (including mobile ones)
		// Nobody should need anything higher than this, and too many sources would slow it down
		// We can do testing in the future to get a better estimate for what this value should be
		public const int MAX_SOURCE_COUNT = 24;

		#region Fields
		public static OpenAL OpenAL { get; private set; } = null;
		public static IntPtr Device { get; private set; } = IntPtr.Zero;
		public static IntPtr Context { get; private set; } = IntPtr.Zero;

		// Audio sources
		private static readonly uint[] _AllSources = new uint[MAX_SOURCE_COUNT]; // All sources generated by the system
		private static readonly Stack<uint> _AvailableSources = new Stack<uint>(MAX_SOURCE_COUNT); // Sources available for binding
		private static readonly List<uint> _UsedSources = new List<uint>(MAX_SOURCE_COUNT); // Sources currently bound
		private static readonly object _SourceLock = new object(); // Object for thread-safe access to sources

		public static bool IsRunning { get; private set; } = false;
		#endregion // Fields

		public static void Initialize()
		{
			OpenAL = new OpenAL();

			var dname = OpenAL.GetAlcString(OpenAL.ALC.DEFAULT_DEVICE_SPECIFIER, IntPtr.Zero);
				
			// Open default audio device
			Device = OpenAL.AlcOpenDevice(dname);
			OpenAL.CheckALCError(IntPtr.Zero, "error in open device");
			if (Device == IntPtr.Zero)
				throw new AudioException("Unable to open default audio playback device.");

			// Create and activate audio context
			Context = OpenAL.AlcCreateContext(Device, new int[2] { 0, 0 }); // Double zero for no special attribs
			OpenAL.CheckALCError(Device, "error in create context");
			if (Context == IntPtr.Zero)
				throw new AudioException("Unable to create context on audio playback device.");
			OpenAL.AlcMakeContextCurrent(Context);
			OpenAL.CheckALCError(Device, "error in make context current");

			// Generate audio sources
			OpenAL.GenSources(MAX_SOURCE_COUNT, _AllSources);
			OpenAL.CheckALError("unable to generate audio sources");
			_AllSources.ForEach(src => _AvailableSources.Push(src));

			IINFO($"Started OpenAL audio engine (device: {dname}).");
			IsRunning = true;
		}

		public static void Terminate()
		{
			// Destroy the sources
			OpenAL.DeleteSources(MAX_SOURCE_COUNT, _AllSources);
			OpenAL.CheckALError("unable to free audio sources");
			_AvailableSources.Clear();
			_UsedSources.Clear();

			// Destroy the context, and close device
			OpenAL.AlcMakeContextCurrent(IntPtr.Zero);
			OpenAL.CheckALCError(Device, "deactivate context");
			OpenAL.AlcDestroyContext(Context);
			OpenAL.CheckALCError(Device, "destroy context");
			Context = IntPtr.Zero;
			OpenAL.AlcCloseDevice(Device);
			Device = IntPtr.Zero;

			OpenAL.Dispose();

			IsRunning = false;

			IINFO("Terminated OpenAL audio engine.");
		}

		public static void Update()
		{
			SoundInstance.UpdateInstances();
		}

		// Automatically resets all effects the source before returning it
		public static uint ReserveSource()
		{
			lock (_SourceLock)
			{
				if (_AvailableSources.Count == 0)
					throw new AudioPlayLimitException();

				uint src = _AvailableSources.Pop();
				_UsedSources.Add(src);
				ResetSourceEffects(src);
				return src;
			}
		}

		public static void ReleaseSource(uint src)
		{
			lock (_SourceLock)
			{
				_UsedSources.Remove(src);
				_AvailableSources.Push(src);
			}
		}

		// Resets all of the effects on the source to their default values
		public static void ResetSourceEffects(uint src)
		{
			// Looping (0 = no looping)
			OpenAL.Sourcei(src, OpenAL.AL.LOOPING, 0);
			// Volume (1 = default)
			OpenAL.Sourcef(src, OpenAL.AL.GAIN, 1);
			// Pitch (1 = default)
			OpenAL.Sourcef(src, OpenAL.AL.PITCH, 1);
		}
	}
}
